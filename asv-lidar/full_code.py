import gymnasium as gym
from gymnasium.spaces import Dict, Box, Discrete
import numpy as np
import pygame
import pygame.freetype
import matplotlib.pyplot as plt
from stable_baselines3 import PPO
from stable_baselines3.common.monitor import Monitor
from stable_baselines3.common.evaluation import evaluate_policy

BOAT_ICON = {
    "size":(30,30),
    "format":"RGBA",
    "bytes": b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\xf6\x11;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\xeb/\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\xff\xff\xff\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\xff\xff\xff\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff\x95\x97\x95\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff@B@\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
}


"""
                    ------------------     LIDAR SCAN     ---------------------
"""

LIDAR_RANGE = 150
LIDAR_SWATH = 90
LIDAR_BEAMS = 21

class Lidar:
    """Basic LIDAR simulator using pygame rects to determine sensor ranges."""
    def __init__(self):
        self._pos_x = 0
        self._pos_y = 0
        self._hdg = 0
        self._angles = None
        self._ranges = None
        self.reset()

    def reset(self):
        """Reset LIDAR to initial state."""
        self._pos_x = 0
        self._pos_y = 0
        self._hdg = 0
        # EDIT: Changed dtype to float for more precision and set up beam angles evenly across the swath
        self._angles = np.linspace(-LIDAR_SWATH/2, LIDAR_SWATH/2, LIDAR_BEAMS, dtype=np.float64)
        self._ranges = np.ones_like(self._angles) * LIDAR_RANGE

    @property
    def angles(self):
        """Return a copy of sensor angles."""
        return self._angles.copy()
    
    @property
    def ranges(self):
        """Return a copy of sensor range readings."""
        return self._ranges.copy()
    
    def scan(self, pos, hdg, obstacles=None) -> np.ndarray:
        """
        Perform a LIDAR scan.

        Args:
            pos (tuple): (x, y) position of the sensor.
            hdg (float): heading of sensor in degrees.
            obstacles (list): list of pygame.Rect obstacles.
        Returns:
            numpy.ndarray: array of ranges from sensor to obstacles.
                If no obstacle is detected, the range remains LIDAR_RANGE.
        """
        # self._pos_x = pos[0]
        # self._pos_y = pos[1]
        self._hdg = hdg

        # Set the lidar (x,y) to be in front of the asv
        lidar_offset = 30
        self._pos_x = pos[0] + lidar_offset * np.sin(np.radians(self._hdg))
        self._pos_y = pos[1] - lidar_offset * np.cos(np.radians(self._hdg))
        
        # ADD: Loop over each beam angle to compute collision distances
        for idx, angle in enumerate(self._angles):
            # Calculate the absolute angle (sensor heading + beam angle) in radians
            absolute_angle = np.radians(self._hdg + angle)
            # Compute the endpoint of the beam at maximum range (if no obstacle)
            end_x = self._pos_x + LIDAR_RANGE * np.sin(absolute_angle)
            end_y = self._pos_y - LIDAR_RANGE * np.cos(absolute_angle)
            # Define the ray as a line tuple: (start_x, start_y, end_x, end_y)
            ray_line = (self._pos_x, self._pos_y, end_x, end_y)
            
            # Initialize the closest distance to the maximum range
            closest_distance = LIDAR_RANGE
            
            # Check for collision with each obstacle
            if obstacles:
                for obs in obstacles:
                    collision = obs.clipline(ray_line)
                    if collision:
                        # returns two points that define the intersecting segment
                        # compute the distance from the sensor to both points and take the smaller one
                        p1 = collision[0]
                        p2 = collision[1]
                        d1 = np.hypot(p1[0] - self._pos_x, p1[1] - self._pos_y)
                        d2 = np.hypot(p2[0] - self._pos_x, p2[1] - self._pos_y)
                        collision_distance = min(d1, d2)
                        if collision_distance < closest_distance:
                            closest_distance = collision_distance
            # Update the range reading for this beam.
            self._ranges[idx] = closest_distance
        
        return self._ranges.copy()
        
    def render(self, surface: pygame.Surface):
        """
        Render the LIDAR beams as lines on the given surface

        Args:
            surface (pygame.Surface): The surface on which to render the beams
        """
        for idx, angle in enumerate(self._angles):
            # Calculate the absolute angle in radians.
            absolute_angle = np.radians(self._hdg + angle)
            # Compute the endpoint for the current beam using its range reading.
            x = self._pos_x + self._ranges[idx] * np.sin(absolute_angle)
            y = self._pos_y - self._ranges[idx] * np.cos(absolute_angle)
            pygame.draw.aaline(surface, (90, 90, 200), (self._pos_x, self._pos_y), (x, y))


"""
                    ------------------     SHIP MODEL     ---------------------
"""

MASS = 500
THRUST_COEF = 0.04 #0.032 #(320N @ 100 RPM, based on 2xT500 thrusters)
DRAG_COEF = 10 #12.8    #(320N of drag at 5m/s)
TURN_COEF = 2800      #480Nm @ 10deg/s
MAX_RUD_ANGLE = 45
RUDDEROFFSET = 3
MOMINERTIA = 0.5*MASS*RUDDEROFFSET**2

class ShipModel:
    def __init__(self):
        self._v = 0.
        self._a = 0.
        self._h = 0.
        self._w = 0.
        self._dw = 0.
        self._last_t = None
        

    def _calc_forces(self, rpm,rud):
        thrust =    THRUST_COEF * rpm**2
        rud_angle = np.radians(MAX_RUD_ANGLE * rud/100)
        fwd_thrust = thrust * np.cos(rud_angle) - DRAG_COEF   * self._v**2
        
        rud_moment = thrust * np.sin(rud_angle) * RUDDEROFFSET
        moment = rud_moment - (TURN_COEF * self._w)
        
        return fwd_thrust, moment
    

    def update(self, rpm,rud, dt):
        
        # Verlet Integration
        d = self._v*dt + self._a*dt*dt*0.5
        self._h = self._h + self._w*dt + self._dw*dt*dt*0.5

        dx = d * np.sin(self._h)
        dy = d * np.cos(self._h)

        thrust, moment = self._calc_forces(rpm,rud)
        a = thrust / MASS
        dw = moment / MOMINERTIA

        self._v = self._v + (self._a + a)*dt*0.5
        self._w = self._w + (self._dw + dw)*dt*0.5

        self._a = a
        self._dw = dw

        return dx,dy,np.degrees(self._h), np.degrees(self._w)
    
if __name__ == '__main__':
    model = ShipModel()

    for t in range(20):
        dx,dy,h,w = model.update(100,0,t)
        print(f"{t}\t{model._v:.1f}\t{w:.1f}")
    
    for t in range(t+1,t+20):
        dx,dy,h,w = model.update(100,100,t)
        print(f"{t}\t{model._v:.1f}\t{w:.1f}")


"""
                    ------------------     GYM ENVIRONMENT     ---------------------
"""

UPDATE_RATE = 0.5
RENDER_FPS = 10
MAP_WIDTH = 400
MAP_HEIGHT = 600

# Actions
PORT = 0
CENTER = 1
STBD = 2
rudder_action = {
    PORT: -25,
    CENTER: 0,
    STBD: 25
}

class ASVLidarEnv(gym.Env):
    """ Autonomous Surface Vessel w/ LIDAR Gymnasium environment

        Args:
            render_mode (str): If/How to render the environment
                "human" will render a pygame windows, episodes are run in real-time
                None will not render, episodes run as fast as possible
    """
    
    metadata = {"render_modes": ["human"]}

    def __init__(
            self, 
            render_mode:str = 'human'
            ) -> None:
        
        self.map_width = MAP_WIDTH
        self.map_height = MAP_HEIGHT

        self.path_range = 20
        self.collision = 20

        pygame.init()
        self.render_mode = render_mode
        self.screen_size = (self.map_width,self.map_height)

        self.icon = None
        self.fps_clock = pygame.time.Clock()

        self.display = None
        self.surface = None
        self.status = None
        if render_mode in self.metadata['render_modes']:
            self.surface = pygame.Surface(self.screen_size)
            self.status = pygame.freetype.SysFont(pygame.font.get_default_font(),size=10)
        # State
        self.elapsed_time = 0.
        self.tgt_x = 0
        self.tgt_y = 0
        self.tgt = 0
        self.asv_y = 0
        self.asv_x = 0
        self.asv_h = 0
        self.asv_w = 0

        self.model = ShipModel()
        self.model._v = 4.5

        """
        Observation space:
            lidar: an array of lidar range: [21 values]
            pos: (x,y) coordinate of asv
            hdg: heading/yaw of the asv
            dhdg: rate of change of heading
            tgt: horizontal offset of the asv from the path
        """
        self.observation_space = Dict(
            {
                "lidar": Box(low=0,high=LIDAR_RANGE,shape=(LIDAR_BEAMS,),dtype=np.int16),
                "pos"  : Box(low=np.array([0,0]),high=np.array(self.screen_size),shape=(2,),dtype=np.int16),
                "hdg"  : Box(low=0,high=360,shape=(1,),dtype=np.int16),
                "dhdg" : Box(low=0,high=36,shape=(1,),dtype=np.int16),
                "tgt"  : Box(low=-50,high=50,shape=(1,),dtype=np.int16)
            }
        )

        self.action_space = Discrete(3)
        
        # LIDAR
        self.lidar = Lidar()

        # Initialize obstacles
        self.obstacles = []


    def _get_obs(self):
        return {
            'lidar': self.lidar.ranges.astype(np.int16),
            'pos': np.array([self.asv_x, self.asv_y],dtype=np.int16),
            'hdg': np.array([self.asv_h],dtype=np.int16),
            'dhdg': np.array([self.asv_w],dtype=np.int16),
            'tgt': np.array([self.tgt],dtype=np.int16)
        }

    def reset(self,seed=None, options=None):
        super().reset(seed=seed)
        self.tgt_x = 150
        self.asv_y = 550
        self.asv_x = 200

        # Generate static obstacles
        self.obstacles = []
        self.obstacles.append(pygame.Rect(np.random.randint(50,300), 50, 60, 60))
        self.obstacles.append(pygame.Rect(np.random.randint(50,300), 300, 40, 40))
        # self.obstacles.append(pygame.Rect(200, 400, 40, 40))

        if self.render_mode in self.metadata['render_modes']:
            self.render()
        return self._get_obs(), {}

    # Configure terminal condition
    def check_done(self, position):
        # check if asv goes outside of the map
        # top or bottom
        if position[1] <= 0 or position[1] >= self.map_height:
            return True
        # left or right
        if position[0] <= 0 or position[0] >= self.map_width:
            return True

        # collide with an obstacle
        lidar_list = self.lidar.ranges.astype(np.int64)
        if np.any(lidar_list <= self.collision):
            return True

        # for obs in self.obstacles:
        #     if obs.collidepoint(position[0], position[1]):
        #         return True

        return False

    def step(self, action):
        self.elapsed_time += UPDATE_RATE
        dx,dy,h,w = self.model.update(100,rudder_action[int(action)],UPDATE_RATE)#pygame.time.get_ticks() / 1000.)
        self.asv_x += dx
        self.asv_y -= dy
        self.asv_h = h
        self.asv_w = w
        self.tgt_y = self.asv_y-50
        self.tgt = self.tgt_x - self.asv_x

        self.lidar.scan((self.asv_x, self.asv_y), self.asv_h, obstacles=self.obstacles)

        if self.render_mode in self.metadata['render_modes']:
            self.render()

        """
        Reward function:
            For each step taken: -1
            Stay on or near the path: 0
            Go outside of the map: -10
            Move in reverse: -10
            Collide with an obstacle: -10
        """
        # step loss
        reward = -1
        if self.tgt < self.path_range and self.tgt > -self.path_range:
            # on or near line
            reward = 0
        if dy < 0:
            # moving in reverse
            reward = -10
        # collision
        lidar_list = self.lidar.ranges.astype(np.int64)
        if np.any(lidar_list <= 30):
            reward = -10
        # off border
        if self.asv_x <= 0 or self.asv_x >= self.map_width or self.asv_y >= self.map_height:
            reward = -10

        terminated = self.check_done((self.asv_x, self.asv_y))
        return self._get_obs(), reward, terminated, {}, {}

    def render(self):
        if self.render_mode != 'human':
            return        
        if self.display is None:
            self.display = pygame.display.set_mode(self.screen_size)

        self.surface.fill((0, 0, 0))

        # Draw obstacles
        for obs in self.obstacles:
            pygame.draw.rect(self.surface, (200, 0, 0), obs)

        # Draw LIDAR scan
        self.lidar.render(self.surface)

        # Draw Path
        pygame.draw.line(self.surface,(0,200,0),(self.tgt_x,0),(self.tgt_x,self.screen_size[1]),5)
        pygame.draw.circle(self.surface,(100,0,0),(self.tgt_x,self.tgt_y),5)

        # Draw ownship
        if self.icon is None:
            self.icon = pygame.image.frombytes(BOAT_ICON['bytes'],BOAT_ICON['size'],BOAT_ICON['format'])

        # Draw status
        lidar = self.lidar.ranges.astype(np.int16)
        if self.status is not None:
            status, rect = self.status.render(f"{self.elapsed_time:005.1f}s  HDG:{self.asv_h:+004.0f}({self.asv_w:+03.0f})  TGT:{self.tgt:+004.0f}",(255,255,255),(0,0,0))
            self.surface.blit(status, [10,550])
            # lidar_status, rect = self.status.render(f"{lidar}",(255,255,255),(0,0,0))
            # self.surface.blit(lidar_status, [5,575])
        os = pygame.transform.rotozoom(self.icon,-self.asv_h,2)
        self.surface.blit(os,os.get_rect(center=(self.asv_x,self.asv_y)))
        self.display.blit(self.surface,[0,0])
        pygame.display.update()
        self.fps_clock.tick(RENDER_FPS)

"""
                    ------------------     TRAINING SCRIPT     ---------------------
"""
# Toggle between train and test
TRAIN = True

# Import your environment
from asv_lidar_gym import ASVLidarEnv

# Create the environment
env = ASVLidarEnv(render_mode=None)
env = Monitor(env)  # For logging episode rewards

# Model save path
MODEL_PATH = "ppo_asv_model"

if TRAIN:
    # Initialize PPO model
    model = PPO("MultiInputPolicy", env, verbose=1, tensorboard_log="./ppo_asv_tensorboard/")

    # Training parameters
    timesteps = 1000000

    # Lists to store rewards for plotting
    reward_log = []
    episode_rewards = []

    # Callback function to log rewards
    def reward_callback(locals_, globals_):
        global episode_rewards
        if "reward" in locals_:
            episode_rewards.append(locals_["reward"])
        if "dones" in locals_ and locals_["dones"]:
            reward_log.append(sum(episode_rewards))
            episode_rewards = []
        return True

    # Train the model
    model.learn(total_timesteps=timesteps, callback=reward_callback)

    # Save the model
    model.save("ppo_asv_model")
    print("Model saved!")

    # Evaluate the model
    mean_reward, std_reward = evaluate_policy(model, env, n_eval_episodes=10)
    print(f"Mean reward: {mean_reward} +/- {std_reward}")

    # Plot the average reward over episodes
    plt.plot(np.convolve(reward_log, np.ones(10)/10, mode='valid'))  # Smooth curve
    plt.xlabel("Episodes")
    plt.ylabel("Average Reward")
    plt.title("Training Progress: Average Reward per Episode")
    plt.savefig("reward_plot.png")
    plt.show()

    env.close()

else:
    # Load the trained model and test it
    model = PPO.load(MODEL_PATH)
    test_env = ASVLidarEnv(render_mode="human")

    obs, _ = test_env.reset()
    done = False
    total_reward = 0

    while not done:
        action, _ = model.predict(obs, deterministic=True)  # Use learned policy
        obs, reward, done, _, _ = test_env.step(action)
        total_reward += reward

    print(f"Test episode completed. Total reward: {total_reward}")


